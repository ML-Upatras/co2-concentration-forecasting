import numpy as np
import pandas as pd
from darts import TimeSeries


def load_co2_data(sample_rate="T"):
    df = pd.read_csv("data/co2_sensors.csv", low_memory=False)

    df.columns = [
        "record_id",
        "timestamp",
        "co2",
        "temperature",
        "humidity",
        "light_intensity",
        "node_id",
    ]

    # drop NaN values
    print(f"Initial Shape of dataset: {df.shape}")
    df = df.dropna(axis=0, how="any")
    print(f"Shape of dataset after dropping NaN values: {df.shape}")

    # drop duplicates
    df = df.drop_duplicates()
    print(f"Shape of dataset after dropping duplicates: {df.shape}")

    # remove rows where temperature and humidity values have "e+"
    df = df[df["temperature"].str.contains("e+") == False]
    df = df[df["humidity"].str.contains("e+") == False]

    # transform co2 temperature, humidity and light_intensity to float
    df["co2"] = df["co2"].astype(float)
    df["temperature"] = df["temperature"].astype(float)
    df["humidity"] = df["humidity"].astype(float)
    df["light_intensity"] = df["light_intensity"].astype(float)

    # convert timestamp to datetime
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="s")

    # remove outliers
    df = df[df["co2"] < 1000]
    df = df[(df["temperature"] <= 40) & (df["temperature"] >= 20)]
    df = df[df["humidity"] < 100]
    df = df[df["light_intensity"] < 1000]

    # groupby timestamp and resample to 1 minute
    df = df.set_index("timestamp")
    df = df.resample(sample_rate).mean()
    df = df.reset_index()

    # drop nan that generated by resampling
    df = df.dropna(axis=0, how="any")

    # reset index
    df = df.reset_index(drop=True)

    return df


def create_future_covariates(timestamp_ts):
    minute_of_day = TimeSeries.from_series(timestamp_ts.dt.minute)
    hour_of_day = TimeSeries.from_series(timestamp_ts.dt.hour)
    day_of_month = TimeSeries.from_series(timestamp_ts.dt.day)
    month_of_year = TimeSeries.from_series(timestamp_ts.dt.month)

    day_of_week = TimeSeries.from_series(timestamp_ts.dt.dayofweek)

    future_covariates = minute_of_day
    future_covariates = future_covariates.stack(hour_of_day)
    future_covariates = future_covariates.stack(day_of_month)
    future_covariates = future_covariates.stack(month_of_year)
    future_covariates = future_covariates.stack(day_of_week)

    future_covariates = future_covariates.astype(np.float64)
    return future_covariates
